// Generated by CoffeeScript 1.10.0
(function() {
  var treeData;

  treeData = [
    {
      name: 'Top Level',
      parent: 'null',
      children: [
        {
          name: 'Level 2: A',
          parent: 'Top Level',
          children: [
            {
              name: 'Son of A',
              parent: 'Level 2: A'
            }, {
              name: 'Daughter of A',
              parent: 'Level 2: A'
            }
          ]
        }, {
          name: 'Level 2: B',
          parent: 'Top Level'
        }
      ]
    }
  ];

  $(document).ready(function() {
    var diagonal, height, i, margin, root, svg, tree, update, width;
    margin = {
      top: 20,
      right: 120,
      bottom: 20,
      left: 120
    };
    width = 960 - margin.right - margin.left;
    height = 500 - margin.top - margin.bottom;
    i = 0;
    tree = d3.layout.tree().size([height, width]);
    diagonal = d3.svg.diagonal().projection(function(d) {
      return [d.y, d.x];
    });
    svg = d3.select('body').append('svg').attr('width', width + margin.right + margin.left).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', "translate(" + margin.left + "," + margin.top + ")");
    update = function(source) {
      var link, links, node, nodeEnter, nodes;
      nodes = tree.nodes(root).reverse();
      links = tree.links(nodes);
      nodes.forEach(function(d) {
        return d.y = d.depth * 180;
      });
      node = svg.selectAll('g.node').data(nodes, function(d) {
        return d.id || (d.id = ++i);
      });
      nodeEnter = node.enter().append('g').attr('class', 'node').attr('transform', function(d) {
        return "translate(" + d.y + "," + d.x + ")";
      });
      nodeEnter.append('circle').attr('r', 10).style('fill', '#fff');
      nodeEnter.append('text').attr('x', function(d) {
        if (d.children || d._children) {
          return -13;
        } else {
          return 13;
        }
      }).attr('dy', '.35em').attr('text-anchor', function(d) {
        if (d.children || d._children) {
          return 'end';
        } else {
          return 'start';
        }
      }).text(function(d) {
        return d.name;
      }).style('fill-opacity', 1);
      link = svg.selectAll('path.link').data(links, function(d) {
        return d.target.id;
      });
      return link.enter().insert('path', 'g').attr('class', 'link').attr('d', diagonal);
    };
    root = treeData[0];
    return update(root);
  });

}).call(this);
