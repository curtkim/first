// Generated by CoffeeScript 1.10.0
(function() {
  var setTimeout2;

  setTimeout2 = function(t, f) {
    return setTimeout(f, t);
  };

  $(document).ready(function() {
    var c, height, margin, svg, width, x, z;
    margin = {
      top: 100,
      right: 0,
      bottom: 0,
      left: 100
    };
    width = 1024;
    height = 1024;
    x = d3.scale.ordinal().rangeBands([0, width]);
    z = d3.scale.linear().domain([0, 4]).clamp(true);
    c = d3.scale.category10().domain(d3.range(10));
    svg = d3.select("body").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).style("margin-left", margin.left + "px").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    return d3.json("miserables.json", function(miserables) {
      var column, fnRow, i, k, l, len, len1, link, matrix, mouseout, mouseover, n, node, nodes, order, orders, ref, row;
      matrix = [];
      nodes = miserables.nodes;
      n = nodes.length;
      for (i = k = 0, len = nodes.length; k < len; i = ++k) {
        node = nodes[i];
        node.index = i;
        node.count = 0;
        matrix[i] = d3.range(n).map(function(j) {
          return {
            x: j,
            y: i,
            z: 0
          };
        });
      }
      ref = miserables.links;
      for (l = 0, len1 = ref.length; l < len1; l++) {
        link = ref[l];
        matrix[link.source][link.target].z += link.value;
        matrix[link.target][link.source].z += link.value;
        matrix[link.source][link.source].z += link.value;
        matrix[link.target][link.target].z += link.value;
        nodes[link.source].count += link.value;
        nodes[link.target].count += link.value;
      }
      console.log(matrix);
      orders = {
        name: d3.range(n).sort(function(a, b) {
          return d3.ascending(nodes[a].name, nodes[b].name);
        }),
        count: d3.range(n).sort(function(a, b) {
          return nodes[b].count - nodes[a].count;
        }),
        group: d3.range(n).sort(function(a, b) {
          return nodes[b].group - nodes[a].group;
        })
      };
      console.log('orders.name', orders.name);
      x.domain(orders.name);
      svg.append("rect").attr("class", "background").attr("width", width).attr("height", height);
      fnRow = function(row) {
        return d3.select(this).selectAll(".cell").data(row.filter(function(d) {
          return d.z;
        })).enter().append("rect").attr("class", "cell").attr("x", function(d) {
          return x(d.x);
        }).attr("width", x.rangeBand()).attr("height", x.rangeBand()).style("fill-opacity", function(d) {
          return z(d.z);
        }).style("fill", function(d) {
          if (nodes[d.x].group === nodes[d.y].group) {
            return c(nodes[d.x].group);
          } else {
            return null;
          }
        }).on("mouseover", mouseover).on("mouseout", mouseout);
      };
      mouseover = function(p) {
        d3.selectAll(".row text").classed("active", function(d, i) {
          return i === p.y;
        });
        return d3.selectAll(".column text").classed("active", function(d, i) {
          return i === p.x;
        });
      };
      mouseout = function() {
        return d3.selectAll("text").classed("active", false);
      };
      row = svg.selectAll(".row").data(matrix).enter().append("g").attr("class", "row").attr("transform", function(d, i) {
        return "translate(0," + (x(i)) + ")";
      }).each(fnRow);
      row.append("line").attr("x2", width);
      row.append("text").attr("x", -6).attr("y", x.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "end").text(function(d, i) {
        return nodes[i].name;
      });
      column = svg.selectAll(".column").data(matrix).enter().append("g").attr("class", "column").attr("transform", function(d, i) {
        return "translate(" + (x(i)) + ") rotate(-90)";
      });
      column.append("line").attr("x1", -width);
      column.append("text").attr("x", 6).attr("y", x.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "start").text(function(d, i) {
        return nodes[i].name;
      });
      order = function(value) {
        var t;
        x.domain(orders[value]);
        t = svg.transition().duration(2500);
        t.selectAll(".row").delay(function(d, i) {
          return x(i) * 4;
        }).attr("transform", function(d, i) {
          return "translate(0," + (x(i)) + ")";
        }).selectAll(".cell").delay(function(d) {
          return x(d.x) * 4;
        }).attr("x", function(d) {
          return x(d.x);
        });
        return t.selectAll(".column").delay(function(d, i) {
          return x(i) * 4;
        }).attr("transform", function(d, i) {
          return "translate(" + (x(i)) + ")rotate(-90)";
        });
      };
      d3.select("#order").on("change", function() {
        return order(this.value);
      });
      return setTimeout2(1000, function() {});
    });
  });

}).call(this);
