// Generated by CoffeeScript 1.10.0
(function() {
  $(document).ready(function() {
    var cells, circles, h, path, projection, states, svg, w;
    w = 1280;
    h = 800;
    projection = d3.geo.azimuthal().mode("equidistant").origin([-98, 38]).scale(1400).translate([640, 360]);
    path = d3.geo.path().projection(projection);
    svg = d3.select("body").insert("svg:svg", "h2").attr("width", w).attr("height", h);
    states = svg.append("svg:g").attr("id", "states");
    circles = svg.append("svg:g").attr("id", "circles");
    cells = svg.append("svg:g").attr("id", "cells");
    d3.select("input[type=checkbox]").on("change", function() {
      return cells.classed("voronoi", this.checked);
    });
    d3.json("us-states.json", function(collection) {
      return states.selectAll("path").data(collection.features).enter().append("svg:path").attr("d", path);
    });
    return d3.csv("flights-airport.csv", function(flights) {
      var arc, countByAirport, destination, flight, j, len, links, linksByOrigin, locationByAirport, origin, positions;
      linksByOrigin = {};
      countByAirport = {};
      locationByAirport = {};
      positions = [];
      arc = d3.geo.greatArc().source(function(d) {
        return locationByAirport[d.source];
      }).target(function(d) {
        return locationByAirport[d.target];
      });
      for (j = 0, len = flights.length; j < len; j++) {
        flight = flights[j];
        origin = flight.origin;
        destination = flight.destination;
        links = linksByOrigin[origin] || (linksByOrigin[origin] = []);
        links.push({
          source: origin,
          target: destination
        });
        countByAirport[origin] = (countByAirport[origin] || 0) + 1;
        countByAirport[destination] = (countByAirport[destination] || 0) + 1;
      }
      return d3.csv("airports.csv", function(airports) {
        var g, polygons;
        airports = airports.filter(function(airport) {
          var location;
          if (countByAirport[airport.iata]) {
            location = [+airport.longitude, +airport.latitude];
            locationByAirport[airport.iata] = location;
            positions.push(projection(location));
            return true;
          }
        });
        polygons = d3.geom.voronoi(positions);
        g = cells.selectAll("g").data(airports).enter().append("svg:g");
        g.append("svg:path").attr("class", "cell").attr("d", function(d, i) {
          return "M" + polygons[i].join("L") + "Z";
        }).on("mouseover", function(d, i) {
          return d3.select("h2 span").text(d.name);
        });
        g.selectAll("path.arc").data(function(d) {
          return linksByOrigin[d.iata] || [];
        }).enter().append("svg:path").attr("class", "arc").attr("d", function(d) {
          return path(arc(d));
        });
        return circles.selectAll("circle").data(airports).enter().append("svg:circle").attr("cx", function(d, i) {
          return positions[i][0];
        }).attr("cy", function(d, i) {
          return positions[i][1];
        }).attr("r", function(d, i) {
          return Math.sqrt(countByAirport[d.iata]);
        }).sort(function(a, b) {
          return countByAirport[b.iata] - countByAirport[a.iata];
        });
      });
    });
  });

}).call(this);
